type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/domain/CinemaRoom.java
  visible: true
  text: |
    package cinema.domain;

    import cinema.utils.Constants;

    import java.util.ArrayList;
    import java.util.List;

    public class CinemaRoom {
        private int totalRows;
        private int totalColumns;
        private List<Seat> availableSeats;

        public CinemaRoom() {
        }

        public CinemaRoom(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = prepareAvailableSeats();
        }

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }

        private List<Seat> prepareAvailableSeats() {
            List<Seat> list = new ArrayList<>();

            for (int i = 1; i <= this.totalRows; i++) {
                for (int j = 1; j <= this.totalColumns; j++) {
                    Seat seat = new Seat();
                    seat.setRow(i);
                    seat.setColumn(j);
                    if (i <= 4) {
                        seat.setPrice(Constants.PRICE);
                    } else seat.setPrice(Constants.CHEAPER_PRICE);
                    list.add(seat);
                }
            }
            return list;
        }
    }
  learner_created: true
- name: src/cinema/model/ErrorDetails.java
  visible: true
  text: |
    package cinema.model;

    public record ErrorDetails(String error) {
    }
  learner_created: true
- name: src/cinema/model/TicketResponseDTO.java
  visible: true
  text: |
    package cinema.model;

    import cinema.domain.Seat;
    import com.fasterxml.jackson.annotation.JsonProperty;

    public class TicketResponseDTO {
        @JsonProperty(value = "returned_ticket")
        Seat seat;

        public TicketResponseDTO(Seat seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/exception/SeatAlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public class SeatAlreadyPurchasedException extends RuntimeException {
        public SeatAlreadyPurchasedException() {
            super("The ticket has been already purchased!");
        }
    }
  learner_created: true
- name: src/cinema/utils/Constants.java
  visible: true
  text: |
    package cinema.utils;

    public class Constants {
        public static final int PRICE = 10;
        public static final int CHEAPER_PRICE = 8;
    }
  learner_created: true
- name: src/cinema/domain/Seat.java
  visible: true
  text: |
    package cinema.domain;

    import java.util.UUID;

    public class Seat {
        private int row;
        private int column;
        private int price;

        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/domain/Ticket.java
  visible: true
  text: |
    package cinema.domain;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.UUID;

    public class Ticket {
        private UUID token;
        @JsonProperty(value = "ticket")
        private Seat seat;

        public Ticket() {
        }

        public Ticket(UUID token) {
            this.token = token;
        }

        public Ticket(UUID token, Seat seat) {
            this.token = token;
            this.seat = seat;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken(UUID token) {
            this.token = token;
        }

        public Seat getSeat() {
            return seat;
        }

        public void setSeat(Seat seat) {
            this.seat = seat;
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaServiceImpl.java
  visible: true
  text: |
    package cinema.service;

    import cinema.domain.CinemaRoom;
    import cinema.domain.Seat;
    import cinema.domain.Ticket;
    import cinema.exception.SeatAlreadyPurchasedException;
    import cinema.exception.SeatOutOfBoundsException;
    import cinema.exception.TicketNotFoundException;
    import cinema.model.TicketResponseDTO;
    import org.springframework.stereotype.Service;

    import java.util.*;

    @Service
    public class CinemaServiceImpl implements CinemaService {
        private static final int TOTAL_ROWS = 9;
        private static final int TOTAL_COLUMNS = 9;

        CinemaRoom room = new CinemaRoom(TOTAL_ROWS, TOTAL_COLUMNS);

        List<Ticket> purchasedTicketList = new ArrayList<>();

        @Override
        public CinemaRoom getAllSeats() {
            return room;
        }

        @Override
        public Ticket buyTicket(Seat seat) {
            Seat reservedSeat = findSeat(seat);

            Ticket ticket = new Ticket();
            ticket.setToken(UUID.randomUUID());
            ticket.setSeat(reservedSeat);

            room.getAvailableSeats().remove(reservedSeat);
            purchasedTicketList.add(ticket);

            return ticket;
        }

        @Override
        public TicketResponseDTO returnTicket(Ticket ticket) {
            Seat seat = purchasedTicketList.stream()
                    .filter(t -> t.getToken().equals(ticket.getToken()))
                    .findFirst()
                    .orElseThrow(TicketNotFoundException::new)
                    .getSeat();

            room.getAvailableSeats().add(seat);
            room.getAvailableSeats().sort(Comparator.comparingInt(Seat::getRow).thenComparing(Seat::getColumn));
            purchasedTicketList.remove(ticket);

            return new TicketResponseDTO(seat);
        }

        private Seat findSeat(Seat seat) {
            if (seat.getRow() > TOTAL_ROWS || seat.getRow() < 1 ||
                    seat.getColumn() > TOTAL_COLUMNS || seat.getColumn() < 1) {
                throw new SeatOutOfBoundsException();
            }

            return room.getAvailableSeats().stream()
                    .filter(s -> s.getRow() == seat.getRow() && s.getColumn() == seat.getColumn())
                    .findFirst()
                    .orElseThrow(SeatAlreadyPurchasedException::new);
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.domain.CinemaRoom;
    import cinema.domain.Seat;
    import cinema.domain.Ticket;
    import cinema.model.TicketResponseDTO;
    import cinema.service.CinemaServiceImpl;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class CinemaController {
        private final CinemaServiceImpl service;

        public CinemaController(CinemaServiceImpl service) {
            this.service = service;
        }

        @GetMapping("/seats")
        public CinemaRoom getAvailableSeats() {
            return service.getAllSeats();
        }

        @PostMapping("/purchase")
        public ResponseEntity<Ticket> buyTicket(@RequestBody Seat seat) {
            return new ResponseEntity<>(service.buyTicket(seat), HttpStatus.OK);
        }

        @PostMapping("/return")
        public ResponseEntity<TicketResponseDTO> returnTicket(@RequestBody Ticket ticket) {
            return new ResponseEntity<>(service.returnTicket(ticket), HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/cinema/exception/SeatOutOfBoundsException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST)
    public class SeatOutOfBoundsException extends RuntimeException {
        public SeatOutOfBoundsException() {
            super("The number of a row or a column is out of bounds!");
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.domain.CinemaRoom;
    import cinema.domain.Seat;
    import cinema.domain.Ticket;
    import cinema.model.TicketResponseDTO;

    public interface CinemaService {
        CinemaRoom getAllSeats();
        Ticket buyTicket(Seat seat);
        TicketResponseDTO returnTicket(Ticket ticket);
    }
  learner_created: true
- name: src/cinema/exception/CinemaExceptionHandler.java
  visible: true
  text: |
    package cinema.exception;

    import cinema.model.ErrorDetails;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    @ControllerAdvice
    public class CinemaExceptionHandler extends ResponseEntityExceptionHandler {

        @ExceptionHandler(SeatAlreadyPurchasedException.class)
        public ResponseEntity<ErrorDetails> handleSeatAlreadyPurchasedException(SeatAlreadyPurchasedException exception) {
            ErrorDetails errorDetails = new ErrorDetails(exception.getMessage());

            return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(SeatOutOfBoundsException.class)
        public ResponseEntity<ErrorDetails> handleSeatOutOfBoundsException(SeatOutOfBoundsException exception) {
            ErrorDetails errorDetails = new ErrorDetails(exception.getMessage());

            return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(TicketNotFoundException.class)
        public ResponseEntity<ErrorDetails> handleTicketNotFoundException(TicketNotFoundException exception) {
            ErrorDetails errorDetails = new ErrorDetails(exception.getMessage());

            return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/domain/Statistics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 07 Mar 2023 22:29:19 UTC"
record: -1
